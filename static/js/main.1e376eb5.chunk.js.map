{"version":3,"sources":["components/Cell.tsx","components/GameBoard.tsx","components/GameUI.tsx","utils/GameUtil.ts","utils/ArrayUtil.ts","components/GameHeader.tsx","Game.tsx","App.tsx","index.tsx"],"names":["Cell","onClick","alive","className","GameBoard","generation","cells","setCells","setStartCells","map","row","rowIndex","columnIndex","setter","column","newCells","cellRow","i","cellIsAlive","j","toggleCell","GameUI","isSimulating","toggleIsSimulating","resetSimulation","clearSimulation","width","height","onWidthChange","onHeightChange","useState","localWidth","setLocalWidth","localHeight","setLocalHeight","type","min","max","defaultValue","onChange","e","value","target","valueAsNumber","nextGenerationCells","y","isAlive","x","neighbourCount","board","count","isYOuterEdge","length","isXOuterEdge","isYLowerEdge","isXLowerEdge","cellNeighbourCount","arrayFromTo","Array","from","fill","GameHeader","window","location","assign","origin","Game","startWidth","startHeight","setWidth","setHeight","startCells","setGeneration","setIsSimulating","simulateGeneration","useCallback","useEffect","timer","setTimeout","clearTimeout","newStartCells","cell","undefined","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e376eb5.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n  alive?: boolean;\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst Cell = ({ onClick, alive = false }: Props) => {\n  return (\n    <div className={`cell ${alive ? \"alive\" : \"dead\"}`} onClick={onClick}></div>\n  );\n};\n\nexport default Cell;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport Cell from \"./Cell\";\n\ninterface Props {\n  generation: number;\n  cells: boolean[][];\n  setCells: Dispatch<SetStateAction<boolean[][]>>;\n  setStartCells: Dispatch<SetStateAction<boolean[][]>>;\n}\n\nconst GameBoard = ({ generation, cells, setCells, setStartCells }: Props) => {\n  const toggleCell = (\n    setter: Dispatch<SetStateAction<boolean[][]>>,\n    row: number,\n    column: number\n  ) => {\n    let newCells = cells.map((cellRow, i) =>\n      cellRow.map((cellIsAlive, j) => {\n        if (i === row && j === column) return !cellIsAlive;\n        return cellIsAlive;\n      })\n    );\n    setter(newCells);\n    if (setter === setStartCells) {\n      setCells(newCells);\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      {[\n        ...cells.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {[\n              ...row.map((alive, columnIndex) => (\n                <Cell\n                  onClick={() => {\n                    if (generation === 1) {\n                      toggleCell(setStartCells, rowIndex, columnIndex);\n                    }\n                  }}\n                  key={columnIndex}\n                  alive={alive}\n                />\n              )),\n            ]}\n          </div>\n        )),\n      ]}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState } from \"react\";\n\ninterface Props {\n  isSimulating: boolean;\n  toggleIsSimulating: () => void;\n  resetSimulation: () => void;\n  clearSimulation: () => void;\n  width: number;\n  height: number;\n  onWidthChange: (value: number) => void;\n  onHeightChange: (value: number) => void;\n}\n\nconst GameUI = ({\n  isSimulating,\n  toggleIsSimulating,\n  resetSimulation,\n  clearSimulation,\n  width,\n  height,\n  onWidthChange,\n  onHeightChange,\n}: Props) => {\n  const [localWidth, setLocalWidth] = useState(width);\n  const [localHeight, setLocalHeight] = useState(height);\n\n  const setWidthIfValid = (value: number) => {\n    if (value > 0 && value <= 100) {\n      setLocalWidth(value);\n    }\n  };\n\n  const setHeightIfValid = (value: number) => {\n    if (value > 0 && value <= 100) {\n      setLocalHeight(value);\n    }\n  };\n\n  const submitSizeChange = () => {\n    resetSimulation();\n    onWidthChange(localWidth);\n    onHeightChange(localHeight);\n  };\n\n  return (\n    <div className=\"game-controls\">\n      <div className=\"game-inputs\">\n        <div className=\"input-label\">Width:</div>\n        <input\n          className=\"input-field\"\n          type=\"number\"\n          min={1}\n          max={100}\n          defaultValue={localWidth}\n          onChange={(e) => setWidthIfValid(e.target.valueAsNumber)}\n        />\n        <div className=\"input-label\">Height:</div>\n        <input\n          className=\"input-field\"\n          type=\"number\"\n          min={1}\n          max={100}\n          value={localHeight}\n          onChange={(e) => setHeightIfValid(e.target.valueAsNumber)}\n        />\n        <button className=\"small-game-button\" onClick={submitSizeChange}>\n          Update size\n        </button>\n      </div>\n      <div className=\"game-buttons\">\n        <button className=\"game-button\" onClick={toggleIsSimulating}>\n          {isSimulating ? \"Pause\" : \"Play\"}\n        </button>\n        <button className=\"game-button\" onClick={resetSimulation}>\n          Reset\n        </button>\n        <button className=\"game-button\" onClick={clearSimulation}>\n          Clear\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameUI;\n","const cellNeighbourCount = (board: boolean[][], y: number, x: number) => {\n  let count = 0;\n  let isYOuterEdge = y >= board.length - 1;\n  let isXOuterEdge = x >= board.length - 1;\n  let isYLowerEdge = y <= 0;\n  let isXLowerEdge = x <= 0;\n\n  if (!isYOuterEdge && !isXOuterEdge && board[y + 1][x + 1]) count++;\n  if (!isYOuterEdge && board[y + 1][x]) count++;\n  if (!isYOuterEdge && !isXLowerEdge && board[y + 1][x - 1]) count++;\n  if (!isXOuterEdge && board[y][x + 1]) count++;\n  if (!isXLowerEdge && board[y][x - 1]) count++;\n  if (!isYLowerEdge && !isXOuterEdge && board[y - 1][x + 1]) count++;\n  if (!isYLowerEdge && board[y - 1][x]) count++;\n  if (!isYLowerEdge && !isXLowerEdge && board[y - 1][x - 1]) count++;\n  return count;\n};\n\nconst nextGenerationCells = (cells: boolean[][]) =>\n  cells.map((row, y) =>\n    row.map((isAlive, x) => {\n      let neighbourCount = cellNeighbourCount(cells, y, x);\n      return (\n        (isAlive && (neighbourCount === 2 || neighbourCount === 3)) ||\n        (!isAlive && neighbourCount === 3)\n      );\n    })\n  );\n\nexport { nextGenerationCells };\n","const arrayFromTo = (width: number, height: number) =>\n  Array.from(Array(width), () => new Array(height).fill(false));\n\nexport default arrayFromTo;\n","import React from \"react\";\n\ninterface Props {\n  generation: number;\n}\n\nconst GameHeader = ({ generation }: Props) => {\n  return (\n    <div className=\"game-header\">\n      <button\n        className=\"back-button\"\n        onClick={() => window.location.assign(window.location.origin)}\n      >\n        {\"< Back\"}\n      </button>\n      <div className=\"game-label\">Generation: {generation}</div>\n    </div>\n  );\n};\n\nexport default GameHeader;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport GameBoard from \"./components/GameBoard\";\nimport GameUI from \"./components/GameUI\";\nimport { nextGenerationCells } from \"./utils/GameUtil\";\nimport arrayFromTo from \"./utils/ArrayUtil\";\nimport GameHeader from \"./components/GameHeader\";\n\ninterface Props {\n  startWidth: number;\n  startHeight: number;\n}\n\nconst Game = ({ startWidth, startHeight }: Props) => {\n  const [width, setWidth] = useState(startWidth);\n  const [height, setHeight] = useState(startHeight);\n\n  const [startCells, setStartCells] = useState<boolean[][]>(\n    arrayFromTo(width, height)\n  );\n  const [cells, setCells] = useState<boolean[][]>(startCells);\n  const [generation, setGeneration] = useState(1);\n  const [isSimulating, setIsSimulating] = useState(false);\n  //const [interval, setInterval] = useState(500);\n  const interval = 500;\n\n  const simulateGeneration = useCallback(() => {\n    setCells(nextGenerationCells);\n    setGeneration(generation + 1);\n  }, [generation]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (isSimulating) {\n        simulateGeneration();\n      }\n    }, interval);\n    return () => clearTimeout(timer);\n  }, [isSimulating, interval, simulateGeneration]);\n\n  useEffect(() => {\n    if (width < 1 || height < 1) {\n      setWidth(startWidth);\n      setHeight(startHeight);\n      return;\n    }\n\n    let newStartCells = arrayFromTo(width, height).map((row, width) =>\n      row.map((cell, height) =>\n        startCells.length > height &&\n        startCells[height].length > width &&\n        startCells[width] !== undefined\n          ? startCells[width][height]\n          : cell\n      )\n    );\n\n    setStartCells(newStartCells);\n    setCells(newStartCells);\n    return () => {};\n    // eslint-disable-next-line\n  }, [height, width, startHeight, startWidth]);\n\n  const resetSimulation = () => {\n    setIsSimulating(false);\n    setGeneration(1);\n    setCells(startCells);\n  };\n\n  const clearSimulation = () => {\n    setIsSimulating(false);\n    setGeneration(1);\n    let newCells = arrayFromTo(width, height);\n    setCells(newCells);\n    setStartCells(newCells);\n  };\n\n  const onWidthChange = (value: number) => {\n    setWidth(value);\n  };\n\n  const onHeightChange = (value: number) => {\n    setHeight(value);\n  };\n\n  return (\n    <div className=\"game\">\n      <GameHeader generation={generation} />\n      <GameBoard\n        generation={generation}\n        cells={cells}\n        setCells={setCells}\n        setStartCells={setStartCells}\n      />\n      <GameUI\n        isSimulating={isSimulating}\n        toggleIsSimulating={() => setIsSimulating(!isSimulating)}\n        resetSimulation={resetSimulation}\n        clearSimulation={clearSimulation}\n        width={width}\n        height={height}\n        onWidthChange={onWidthChange}\n        onHeightChange={onHeightChange}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Game startWidth={20} startHeight={20} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}