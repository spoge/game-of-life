{"version":3,"sources":["components/Cell.tsx","components/GameBoard.tsx","components/GameUI.tsx","utils/GameUtil.ts","utils/ArrayUtil.ts","Game.tsx","App.tsx","index.tsx"],"names":["Cell","onClick","alive","className","GameBoard","generation","cells","setCells","setStartCells","map","row","rowIndex","key","columnIndex","setter","column","newCells","cellRow","i","cellIsAlive","j","toggleCell","GameUI","isSimulating","toggleIsSimulating","resetSimulation","clearSimulation","nextGenerationCells","y","isAlive","x","neighbourCount","board","count","isYOuterEdge","length","isXOuterEdge","isYLowerEdge","isXLowerEdge","cellNeighbourCount","arrayFromTo","width","height","Array","from","fill","Game","useState","startCells","setGeneration","setIsSimulating","interval","useEffect","timer","setTimeout","simulateGeneration","clearTimeout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04ff9f3c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  alive?: boolean;\r\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\r\n}\r\n\r\nconst Cell: React.FC<Props> = ({ onClick, alive = false }) => {\r\n  return (\r\n    <div className={`cell ${alive ? \"alive\" : \"dead\"}`} onClick={onClick}></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\ninterface Props {\r\n  generation: number;\r\n  cells: boolean[][];\r\n  setCells: Dispatch<SetStateAction<boolean[][]>>;\r\n  setStartCells: Dispatch<SetStateAction<boolean[][]>>;\r\n}\r\n\r\nconst GameBoard: React.FC<Props> = ({\r\n  generation,\r\n  cells,\r\n  setCells,\r\n  setStartCells,\r\n}) => {\r\n  const toggleCell = (\r\n    setter: Dispatch<SetStateAction<boolean[][]>>,\r\n    row: number,\r\n    column: number\r\n  ) => {\r\n    let newCells = cells.map((cellRow, i) =>\r\n      cellRow.map((cellIsAlive, j) => {\r\n        if (i === row && j === column) return !cellIsAlive;\r\n        return cellIsAlive;\r\n      })\r\n    );\r\n    setter(newCells);\r\n    if (setter === setStartCells) {\r\n      setCells(newCells);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {[\r\n        ...cells.map((row, rowIndex) => (\r\n          <div className=\"row\" key={rowIndex}>\r\n            {[\r\n              ...row.map((alive, columnIndex) => (\r\n                <Cell\r\n                  onClick={() => {\r\n                    if (generation === 1) {\r\n                      toggleCell(setStartCells, rowIndex, columnIndex);\r\n                    }\r\n                  }}\r\n                  key={columnIndex}\r\n                  alive={alive}\r\n                />\r\n              )),\r\n            ]}\r\n          </div>\r\n        )),\r\n      ]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  generation: number;\r\n  isSimulating: boolean;\r\n  toggleIsSimulating: () => void;\r\n  resetSimulation: () => void;\r\n  clearSimulation: () => void;\r\n}\r\n\r\nconst GameUI: React.FC<Props> = ({\r\n  generation,\r\n  isSimulating,\r\n  toggleIsSimulating,\r\n  resetSimulation,\r\n  clearSimulation,\r\n}) => {\r\n  return (\r\n    <div className=\"game-ui\">\r\n      <div className=\"game-label\">Gen: {generation}</div>\r\n      <button className=\"game-button\" onClick={toggleIsSimulating}>\r\n        {isSimulating ? \"Pause\" : \"Play\"}\r\n      </button>\r\n      <button className=\"game-button\" onClick={resetSimulation}>\r\n        Reset\r\n      </button>\r\n      <button className=\"game-button\" onClick={clearSimulation}>\r\n        Clear\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameUI;\r\n","const cellNeighbourCount = (board: boolean[][], y: number, x: number) => {\r\n  let count = 0;\r\n  let isYOuterEdge = y >= board.length - 1;\r\n  let isXOuterEdge = x >= board.length - 1;\r\n  let isYLowerEdge = y <= 0;\r\n  let isXLowerEdge = x <= 0;\r\n\r\n  if (!isYOuterEdge && !isXOuterEdge && board[y + 1][x + 1]) count++;\r\n  if (!isYOuterEdge && board[y + 1][x]) count++;\r\n  if (!isYOuterEdge && !isXLowerEdge && board[y + 1][x - 1]) count++;\r\n  if (!isXOuterEdge && board[y][x + 1]) count++;\r\n  if (!isXLowerEdge && board[y][x - 1]) count++;\r\n  if (!isYLowerEdge && !isXOuterEdge && board[y - 1][x + 1]) count++;\r\n  if (!isYLowerEdge && board[y - 1][x]) count++;\r\n  if (!isYLowerEdge && !isXLowerEdge && board[y - 1][x - 1]) count++;\r\n  return count;\r\n};\r\n\r\nconst nextGenerationCells = (cells: boolean[][]) =>\r\n  cells.map((row, y) =>\r\n    row.map((isAlive, x) => {\r\n      let neighbourCount = cellNeighbourCount(cells, y, x);\r\n      return (\r\n        (isAlive && (neighbourCount === 2 || neighbourCount === 3)) ||\r\n        (!isAlive && neighbourCount === 3)\r\n      );\r\n    })\r\n  );\r\n\r\nexport { nextGenerationCells };\r\n","const arrayFromTo = (width: number, height: number) =>\r\n  Array.from(Array(width), () => new Array(height).fill(false));\r\n\r\nexport default arrayFromTo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport GameUI from \"./components/GameUI\";\r\nimport { nextGenerationCells } from \"./utils/GameUtil\";\r\nimport arrayFromTo from \"./utils/ArrayUtil\";\r\n\r\ninterface Props {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst Game: React.FC<Props> = ({ width, height }) => {\r\n  const [startCells, setStartCells] = useState<boolean[][]>(\r\n    arrayFromTo(width, height)\r\n  );\r\n  const [cells, setCells] = useState<boolean[][]>(startCells);\r\n  const [generation, setGeneration] = useState(1);\r\n  const [isSimulating, setIsSimulating] = useState(false);\r\n  const [interval, setInterval] = useState(500);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (isSimulating) {\r\n        simulateGeneration();\r\n        setGeneration(generation + 1);\r\n      }\r\n    }, interval);\r\n    return () => clearTimeout(timer);\r\n  }, [generation, isSimulating, interval]);\r\n\r\n  const simulateGeneration = () => {\r\n    setCells(nextGenerationCells);\r\n    setGeneration(generation + 1);\r\n  };\r\n\r\n  const resetSimulation = () => {\r\n    setIsSimulating(false);\r\n    setGeneration(1);\r\n    setCells(startCells);\r\n  };\r\n\r\n  const clearSimulation = () => {\r\n    setIsSimulating(false);\r\n    setGeneration(1);\r\n    let newCells = arrayFromTo(width, height);\r\n    setCells(newCells);\r\n    setStartCells(newCells);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <GameBoard\r\n        generation={generation}\r\n        cells={cells}\r\n        setCells={setCells}\r\n        setStartCells={setStartCells}\r\n      />\r\n      <GameUI\r\n        generation={generation}\r\n        isSimulating={isSimulating}\r\n        toggleIsSimulating={() => setIsSimulating(!isSimulating)}\r\n        resetSimulation={resetSimulation}\r\n        clearSimulation={clearSimulation}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Game width={40} height={40} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}