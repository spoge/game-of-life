{"version":3,"sources":["components/Cell.tsx","components/GameBoard.tsx","components/GameUI.tsx","utils/GameUtil.ts","utils/ArrayUtil.ts","components/GameHeader.tsx","Game.tsx","App.tsx","index.tsx"],"names":["Cell","onClick","alive","className","GameBoard","generation","cells","setCells","setStartCells","map","row","rowIndex","key","columnIndex","setter","column","newCells","cellRow","i","cellIsAlive","j","toggleCell","GameUI","isSimulating","toggleIsSimulating","resetSimulation","clearSimulation","width","height","onWidthChange","onHeightChange","useState","localWidth","setLocalWidth","localHeight","setLocalHeight","type","min","max","defaultValue","onChange","e","value","target","valueAsNumber","nextGenerationCells","y","isAlive","x","neighbourCount","board","count","isYOuterEdge","length","isXOuterEdge","isYLowerEdge","isXLowerEdge","cellNeighbourCount","arrayFromTo","Array","from","fill","GameHeader","window","location","assign","origin","Game","startWidth","startHeight","setWidth","setHeight","startCells","setGeneration","setIsSimulating","interval","useEffect","timer","setTimeout","simulateGeneration","clearTimeout","newStartCells","cell","undefined","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3d3891b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  alive?: boolean;\r\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\r\n}\r\n\r\nconst Cell: React.FC<Props> = ({ onClick, alive = false }) => {\r\n  return (\r\n    <div className={`cell ${alive ? \"alive\" : \"dead\"}`} onClick={onClick}></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\ninterface Props {\r\n  generation: number;\r\n  cells: boolean[][];\r\n  setCells: Dispatch<SetStateAction<boolean[][]>>;\r\n  setStartCells: Dispatch<SetStateAction<boolean[][]>>;\r\n}\r\n\r\nconst GameBoard: React.FC<Props> = ({\r\n  generation,\r\n  cells,\r\n  setCells,\r\n  setStartCells,\r\n}) => {\r\n  const toggleCell = (\r\n    setter: Dispatch<SetStateAction<boolean[][]>>,\r\n    row: number,\r\n    column: number\r\n  ) => {\r\n    let newCells = cells.map((cellRow, i) =>\r\n      cellRow.map((cellIsAlive, j) => {\r\n        if (i === row && j === column) return !cellIsAlive;\r\n        return cellIsAlive;\r\n      })\r\n    );\r\n    setter(newCells);\r\n    if (setter === setStartCells) {\r\n      setCells(newCells);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {[\r\n        ...cells.map((row, rowIndex) => (\r\n          <div className=\"row\" key={rowIndex}>\r\n            {[\r\n              ...row.map((alive, columnIndex) => (\r\n                <Cell\r\n                  onClick={() => {\r\n                    if (generation === 1) {\r\n                      toggleCell(setStartCells, rowIndex, columnIndex);\r\n                    }\r\n                  }}\r\n                  key={columnIndex}\r\n                  alive={alive}\r\n                />\r\n              )),\r\n            ]}\r\n          </div>\r\n        )),\r\n      ]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React, {\r\n  ChangeEvent,\r\n  useState,\r\n  Dispatch,\r\n  SetStateAction,\r\n  useRef,\r\n  createRef,\r\n} from \"react\";\r\n\r\ninterface Props {\r\n  isSimulating: boolean;\r\n  toggleIsSimulating: () => void;\r\n  resetSimulation: () => void;\r\n  clearSimulation: () => void;\r\n  width: number;\r\n  height: number;\r\n  onWidthChange: (value: number) => void;\r\n  onHeightChange: (value: number) => void;\r\n}\r\n\r\nconst GameUI: React.FC<Props> = ({\r\n  isSimulating,\r\n  toggleIsSimulating,\r\n  resetSimulation,\r\n  clearSimulation,\r\n  width,\r\n  height,\r\n  onWidthChange,\r\n  onHeightChange,\r\n}) => {\r\n  const [localWidth, setLocalWidth] = useState(width);\r\n  const [localHeight, setLocalHeight] = useState(height);\r\n\r\n  const setWidthIfValid = (value: number) => {\r\n    if (value > 0 && value <= 100) {\r\n      setLocalWidth(value);\r\n    }\r\n  };\r\n\r\n  const setHeightIfValid = (value: number) => {\r\n    if (value > 0 && value <= 100) {\r\n      setLocalHeight(value);\r\n    }\r\n  };\r\n\r\n  const submitSizeChange = () => {\r\n    resetSimulation();\r\n    onWidthChange(localWidth);\r\n    onHeightChange(localHeight);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-controls\">\r\n      <div className=\"game-inputs\">\r\n        <div className=\"input-label\">Width:</div>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"number\"\r\n          min={1}\r\n          max={100}\r\n          defaultValue={localWidth}\r\n          onChange={(e) => setWidthIfValid(e.target.valueAsNumber)}\r\n        />\r\n        <div className=\"input-label\">Height:</div>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"number\"\r\n          min={1}\r\n          max={100}\r\n          value={localHeight}\r\n          onChange={(e) => setHeightIfValid(e.target.valueAsNumber)}\r\n        />\r\n        <button className=\"small-game-button\" onClick={submitSizeChange}>\r\n          Update size\r\n        </button>\r\n      </div>\r\n      <div className=\"game-buttons\">\r\n        <button className=\"game-button\" onClick={toggleIsSimulating}>\r\n          {isSimulating ? \"Pause\" : \"Play\"}\r\n        </button>\r\n        <button className=\"game-button\" onClick={resetSimulation}>\r\n          Reset\r\n        </button>\r\n        <button className=\"game-button\" onClick={clearSimulation}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameUI;\r\n","const cellNeighbourCount = (board: boolean[][], y: number, x: number) => {\r\n  let count = 0;\r\n  let isYOuterEdge = y >= board.length - 1;\r\n  let isXOuterEdge = x >= board.length - 1;\r\n  let isYLowerEdge = y <= 0;\r\n  let isXLowerEdge = x <= 0;\r\n\r\n  if (!isYOuterEdge && !isXOuterEdge && board[y + 1][x + 1]) count++;\r\n  if (!isYOuterEdge && board[y + 1][x]) count++;\r\n  if (!isYOuterEdge && !isXLowerEdge && board[y + 1][x - 1]) count++;\r\n  if (!isXOuterEdge && board[y][x + 1]) count++;\r\n  if (!isXLowerEdge && board[y][x - 1]) count++;\r\n  if (!isYLowerEdge && !isXOuterEdge && board[y - 1][x + 1]) count++;\r\n  if (!isYLowerEdge && board[y - 1][x]) count++;\r\n  if (!isYLowerEdge && !isXLowerEdge && board[y - 1][x - 1]) count++;\r\n  return count;\r\n};\r\n\r\nconst nextGenerationCells = (cells: boolean[][]) =>\r\n  cells.map((row, y) =>\r\n    row.map((isAlive, x) => {\r\n      let neighbourCount = cellNeighbourCount(cells, y, x);\r\n      return (\r\n        (isAlive && (neighbourCount === 2 || neighbourCount === 3)) ||\r\n        (!isAlive && neighbourCount === 3)\r\n      );\r\n    })\r\n  );\r\n\r\nexport { nextGenerationCells };\r\n","const arrayFromTo = (width: number, height: number) =>\r\n  Array.from(Array(width), () => new Array(height).fill(false));\r\n\r\nexport default arrayFromTo;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  generation: number;\r\n}\r\n\r\nconst GameHeader: React.FC<Props> = ({ generation }) => {\r\n  return (\r\n    <div className=\"game-header\">\r\n      <button\r\n        className=\"back-button\"\r\n        onClick={() => window.location.assign(window.location.origin)}\r\n      >\r\n        {\"< Back\"}\r\n      </button>\r\n      <div className=\"game-label\">Generation: {generation}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameHeader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport GameUI from \"./components/GameUI\";\r\nimport { nextGenerationCells } from \"./utils/GameUtil\";\r\nimport arrayFromTo from \"./utils/ArrayUtil\";\r\nimport GameHeader from \"./components/GameHeader\";\r\n\r\ninterface Props {\r\n  startWidth: number;\r\n  startHeight: number;\r\n}\r\n\r\nconst Game: React.FC<Props> = ({ startWidth, startHeight }) => {\r\n  const [width, setWidth] = useState(startWidth);\r\n  const [height, setHeight] = useState(startHeight);\r\n\r\n  const [startCells, setStartCells] = useState<boolean[][]>(\r\n    arrayFromTo(width, height)\r\n  );\r\n  const [cells, setCells] = useState<boolean[][]>(startCells);\r\n  const [generation, setGeneration] = useState(1);\r\n  const [isSimulating, setIsSimulating] = useState(false);\r\n  const [interval, setInterval] = useState(500);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (isSimulating) {\r\n        simulateGeneration();\r\n        setGeneration(generation + 1);\r\n      }\r\n    }, interval);\r\n    return () => clearTimeout(timer);\r\n  }, [generation, isSimulating, interval]);\r\n\r\n  useEffect(() => {\r\n    if (width < 1 || height < 1) {\r\n      setWidth(startWidth);\r\n      setHeight(startHeight);\r\n      return;\r\n    }\r\n\r\n    let newStartCells = arrayFromTo(width, height).map((row, width) =>\r\n      row.map((cell, height) =>\r\n        startCells.length > height &&\r\n        startCells[height].length > width &&\r\n        startCells[width] !== undefined\r\n          ? startCells[width][height]\r\n          : cell\r\n      )\r\n    );\r\n\r\n    setStartCells(newStartCells);\r\n    setCells(newStartCells);\r\n  }, [width, height]);\r\n\r\n  const simulateGeneration = () => {\r\n    setCells(nextGenerationCells);\r\n    setGeneration(generation + 1);\r\n  };\r\n\r\n  const resetSimulation = () => {\r\n    setIsSimulating(false);\r\n    setGeneration(1);\r\n    setCells(startCells);\r\n  };\r\n\r\n  const clearSimulation = () => {\r\n    setIsSimulating(false);\r\n    setGeneration(1);\r\n    let newCells = arrayFromTo(width, height);\r\n    setCells(newCells);\r\n    setStartCells(newCells);\r\n  };\r\n\r\n  const onWidthChange = (value: number) => {\r\n    setWidth(value);\r\n  };\r\n\r\n  const onHeightChange = (value: number) => {\r\n    setHeight(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <GameHeader generation={generation} />\r\n      <GameBoard\r\n        generation={generation}\r\n        cells={cells}\r\n        setCells={setCells}\r\n        setStartCells={setStartCells}\r\n      />\r\n      <GameUI\r\n        isSimulating={isSimulating}\r\n        toggleIsSimulating={() => setIsSimulating(!isSimulating)}\r\n        resetSimulation={resetSimulation}\r\n        clearSimulation={clearSimulation}\r\n        width={width}\r\n        height={height}\r\n        onWidthChange={onWidthChange}\r\n        onHeightChange={onHeightChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Game startWidth={20} startHeight={20} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}